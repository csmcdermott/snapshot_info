#!/usr/bin/php -q
<?php

/**
 *  @File
 *  This script displays information about the snapshots associated with an AWS
 *  account.
 *
 *  We offer no warantee or guarantee - use this code at your own risk!
 *  All code is Copyright (C) 2011, Applied Trust Engineering, Inc.
 *
 */

/**
 *  This script expects an API key for Amazon's AWS EC2 service. It gets a list
 *  of all snapshots associated with the account (owner = self) and then
 *  analyzes the resulting list and prints out a details summary.
 *
 *  Written by Chris McDermott, AppliedTrust, chris@appliedtrust.com
 *    v1.1 8/19/2011
 *
 *  @param K
 *    Specify the Amazon EC2 API key.
 *  @param S
 *    Specify the Amazon EC2 API secret key. 
 *
 *  @return
 *    Returns 1 if there were errors, otherwise 0.
 */

putenv('TZ=America/Denver');
error_reporting(-1);

$options = getopt("S:K:");
if (!isset($options["S"])) { usage(); }
if (!isset($options["K"])) { usage(); }

define('AWS_KEY', $options["K"]);
define('AWS_SECRET_KEY', $options["S"]);

// This file is the Amazon AWS PHP SDK, available from
// https://aws.amazon.com/sdkforphp/
require_once '/usr/local/aws-php-sdk/sdk.class.php';

/**
 *  @data
 *    A two-dimensional array holding results and information about volumes.
 *    -volumeId: String holding the volumeId for the snapshot:
 *      -count: Integer holding the number of snapshots seen for this volume
 *      -first: Unix timestamp of the oldest snapshot of this volume
 *      -last: Unix timestamp of the newest snapshot of this volume
 *      -snapshots: Array holding the list of snapshotId's of all snapshots of this volume
 *      -text: String holding descriptive text about volume
 */
$data = array();

$ec2 = new AmazonEC2();
$response = $ec2->describe_snapshots(array(
  'Owner' => 'self', 
));

foreach ($response->body->snapshotSet->item as $snapshot) {
  $volumeId = (string)($snapshot->volumeId);

  // If this is the first time we've seen this volumeId, we need to
  // initialize some variables.
  if (!isset($data[$volumeId])) {
    $data[$volumeId] = array(
      'count' => 0,
      'first' => time(),
      'last' => time(),
      'snapshots' => array(),
      'text' => ' ',
    );
  }

  $data[$volumeId]['count']++;
  array_push($data[$volumeId]['snapshots'], (string)($snapshot->snapshotId));

  if(strtotime($snapshot->startTime) < $data[$volumeId]['first']) {
    $data[$volumeId]['first'] = strtotime($snapshot->startTime);
  }
  elseif (true) {
    $data[$volumeId]['last'] = strtotime($snapshot->startTime); 
  }

  // If the text is already set, then skip to the next snapshot - the rest of
  // this for loop is just to generate that descriptive text about the volume.
  if ($data[$volumeId]['text'] != ' ') {
    continue;
  }

  $description = $ec2->describe_volumes(array(
    'VolumeId' => $volumeId,
  ));

  if (isset($description->body->Errors->Error->Code)) {
    $data[$volumeId]['text'] .= $description->body->Errors->Error->Message;
    continue;
  }

  if ($description->body->volumeSet->item->attachmentSet->item->status == "attached") {
    $device = $description->body->volumeSet->item->attachmentSet->item->device;
    $instance = $description->body->volumeSet->item->attachmentSet->item->instanceId;
    $data[$volumeId]['text'] .= $device . " on " . $instance;
    if (isset($description->body->volumeSet->item->tagSet->item->value)) {
      $value = $description->body->volumeSet->item->tagSet->item->value;
      $data[$volumeId]['text'] .= " \t\t\t(" . $value . ")";
    }
  }
  else {
    $data[$volumeId]['text'] .= "unattached";
  }
}

echo "\n\nSummary: " . "\n";
echo "  " . count($data) . " total volumes with snapshots.\n\n";
echo "  VolumeId      Count \t\tStart - End \t\t Info \t\t\t\t\t\tDesc (if avail)\n";
echo "  --------      ----- \t\t----------- \t\t ---- \t\t\t\t\t\t---------------\n";
foreach ($data as $volume => $info) {
  echo "  " . $volume . "  " . $info['count'] . " snapshots\t" . date('m/d/Y', $info['first']);
  echo " - " . date('m/d/Y', $info['last']) . "\t" . $info['text'] . "\n"; 
}

echo "\n";
exit(0);

function usage() {
	echo "usage: snapshot_info -K <accesskey> -S <secretkey>\n";
	exit(1);
}
